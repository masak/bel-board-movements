(def checkbounds (v max)
  (check v [< -1 _ max] (ret 'impossible-move)))

(mac actions args
  (if (no (car args))
      nil
      `(append (list (fn () ,(caddr args)))
               (actions ,@(cdddr args)))))

(mac withret body
  (letu v
    `(ccc (fn (,v)
       (bind ret ,v
         ,@body)))))

(def run ((w h) (x y) cmds)
  (withs (direction '(0 -1)
          move (fn (f)
                 (checkbounds (++ x (f (1 direction))) w)
                 (checkbounds (++ y (f (2 direction))) h))
          turn (fn (angle)
                 (let new (* (apply buildnum direction) angle)
                   (set direction (list (rpart new) (ipart new)))))
          as (actions
            (0 quit             (ret (list x y)))
            (1 forward          (move idfn))
            (2 backward         (move inv))
            (3 clockwise        (turn 1i))
            (4 counterclockwise (turn -1i))))
    (withret
      (each c cmds
        (eif a (nth (inc cmd) as)
               (ret 'illegal-command)
               (a)))
      (list x y))))
