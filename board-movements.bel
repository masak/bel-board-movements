(def checkbounds (v max)
  (or (<= 0 v (- max 1)) (ret 'impossible-move)))

(def cdddr (x) (cdr (cddr x)))

(mac actions args
  (if (car args)
      `(append (list (cons ,(car args) (fn () ,(caddr args))))
               (actions ,@(cdddr args)))))

(mac bindret body
  (letu v
    `(ccc (fn (,v)
       (bind ret ,v
         ,@body)))))

(def run ((w h) (x y) cmds)
  (withs (direction -i
          move (fn (f)
                 (checkbounds (++ x (f (rpart direction))) w)
                 (checkbounds (++ y (f (ipart direction))) h))
          turn (fn (angle)
                 (zap * direction angle))
          as (actions
            (0 quit             (ret (list x y)))
            (1 forward          (move idfn))
            (2 backward         (move inv))
            (3 clockwise        (turn +i))
            (4 counterclockwise (turn -i))))
    (bindret
      (map [aif (get _ as) ((cdr it)) (ret 'illegal-command)] cmds)
      (list x y))))
